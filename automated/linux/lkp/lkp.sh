#!/bin/bash -xe

#- DOCS
#-- NOTES
# - (08d-03m-21y) lkp NEEDS to run as root
#
#-- FUNCTION DOCUMENTATION
# - INPUT:     a list of parameters to pass
#              [ext] list of extern variable used
# - SET:       variables that are initializated or left untouched otherwise
# - MODIFY:    variables that are modified
#
#-- INSTALLATION
# -s|--skip-install decide if the script has to run installation procedure.
# At first LKP is searched: if present, only dependecies are checked;
# otherwise, lkp is installed from git-repo with the full procedure.
# IN ANY CASE at the end lkp is checked to be installed, if not, exit occurs.
#
#-S|--skip-test-install decide if 'lkp install <atomic-job>' is to be runned.
# ATTENTION unmet test dependencies could lead to test errors which are not
# captured [see --OUTPUT in docs]
#
#-- OUTPUT
# LKP doesn't report the single atomic-jobs ret-value, but it has to be
# gathered inside test output; since every test has a different format,
# there is no easy way, but a specific test-ret-value-get-funtion should be
# written in future.
# Reading lkp ret-val gives 1 ONLY if LKP command gets an error, so 0 is
# returned if atomic-job fails but lkp program itself doesn't.
# Because of that, every atomic-jobs return is reported to be 'unknown' and
# major test are reported 'pass' when all atomic-jobs children are runned.
#
#-- SECURITY CONCERN
#- The fastest and shortest way to use QUIET variable for output suppression,
#- is to use 'eval <command> $QUIET, otherwise the variable content as
#- parameters and not shell directive. This cause two potentialy security flaws,
#- since there is no input sanitisation of -t and -T flags.
#---

#- CODE
#-- IMPORT
. "../../lib/sh-test-lib"
#-- VARIABLES
TEST_DIR=$(dirname "$(realpath "$0")")
OUTPUT_DIR="${TEST_DIR}/output"
RESULT_FILE="${OUTPUT_DIR}/result.txt"

LKP_INSTALL_PATH="/opt"
LKP_GIT_REPO="https://github.com/intel/lkp-tests.git"
LKP_PATH=''
export RESULT_FILE
TEST_QUEUE=''                          #tests to run (set by args)
ATOMIC_JOBS=''                         #single jobs to run
ATOMIC_FILES=''                                #list of atomic-jobs generated by a test
QUIET=''                               #append to command to manage verbosity
#--- flags with default values
SKIP_INSTALL='false'
SKIP_TEST_INSTALL='false'
#--FUNCTIONS DEFINITIONS
#--- HELP TEXT
usage()
{      #weird tabulations is for correct printing
       echo "$0 [-h] [-s true|false] -t \"<test> [test ...]\" [-T \"atomic-job.yaml [... ] "
       echo "NOTE: do not compose short-option in single string (eg: '-st' is incorrect)"
       echo "OPTIONS"
       echo "-h, --help                print this help"
       echo "-d, --install-dir         instalattion directory (default: /opt/)"
       echo "-g, --git-repo            use the git repository passed. if! the standard one used"
       echo "-q, --quiet               suppress lkp output and leave only the script one"
       echo "-s, --skip-install        skip the installation of lkp (not single test ones)"
       echo "-S, --skip-test-install   skip the installation of test dependencies"
       echo "-t, --test                which tests will be executed"
       echo "-T, --atomic-job          which atomic-jobs will be executed (empty for all)"
       echo "  NOTE:   - use quotes and usa space-char to separate tests and atomic-job names"
       echo "                  (eg: -t \"test0 test1 test2\")"
       echo "          - test name must be present inside [...]lkp/jobs/<test-name>.yaml"
       echo "          - atomic-job name must be exactly one generated by \"lkp split-job\" with '.yaml' ext"
       exit 1
}

#--- ARGS PARSING
# - INPUT:     $1 Use "$@" for parsing (use double-quotes to avoid error with char)
# - SET:       #
# - MODIFY:    #
argument_parsing()
{
       while [ "$#" -gt 0 ]; do
               param=$1
               case ${param} in

                -d | --install-dir)
                   LKP_INSTALL_PATH="$2"
                   shift; shift;
                   ;;
                -g | --git-repo)
                   LKP_GIT_REPO="$2"
                   shift; shift;
                   ;;
                -q | --quiet)
                   QUIET='>/dev/null 2>&1'
                   shift;
                   ;;
                -s | --skip-install)
                   #${var,,} make variable to lowercase; require:bash >=4.0
                   if [ "${2,,}" = 'true' ] || [ "${2,,}" = 'false' ] ; then
                       SKIP_INSTALL="${2,,}"
                       shift; shift;
                   else
                       error_msg "'--skip-install' value must be [true|false]"
                       exit 1
                   fi
                   ;;
                 -S | --skip-test-install)
                   #${var,,} make variable to lowercase; require:bash >=4.0
                   if [ "${2,,}" = 'true' ] || [ "${2,,}" = 'false' ] ; then
                       SKIP_TEST_INSTALL="${2,,}"
                       shift; shift;
                   else
                       error_msg "'--skip-test-install' value must be [true|false]"
                       exit 1
                   fi
                   ;;
                 -t | --test)
                   read -a TEST_QUEUE <<< "$2"
                   shift; shift;
                   ;;

                 -T | --atomic-job)
                   read -a ATOMIC_JOBS <<< "$2"
                   shift; shift;
                   ;;

                 -h | --help)
                   usage
                   exit 1
                   ;;
                 *)
                   error_msg "'${param}' is not a defined option"
                   exit 1;
                   ;;
               esac
       done
}

#--- Check if number of parameters is correct with the number passed.
# - INPUT:     $1 number of parameters
#              $2 use "$@" as parameters to count.
# - SET:       <None>
# - MODIFY:    <None>
check_function_param()
{
       NUM_PARAM=$((${1}+1))

       if [[ ! ${NUM_PARAM} == $# ]]; then
               error_msg "Incorrect number of parameters in a function call"
               exit 2
       fi
}

#--- Install lkp from git repository unless otherwise specified
# - INPUT:     <None>
# - SET:       LKP_PATH
# - MODIFY:    PWD
install()
{
       check_function_param 0 "$@"

       LKP_PATH=$(readlink -f $(which lkp) 2>/dev/null| sed 's:bin.*::')

       if [ "${SKIP_INSTALL}" = 'false' ]; then
               info_msg "LKP installation ..."
               if [[ -z  "${LKP_PATH}" ]]; then
                       info_msg "LKP not present: installing..."
                       cd ${LKP_INSTALL_PATH}
                       eval sudo git clone ${LKP_GIT_REPO} ${QUIET}
                       cd lkp-tests
                       eval sudo make install ${QUIET}
               else
                       info_msg "LKP is already installed."
               fi
               info_msg "Cheching dependecies..."
               eval sudo lkp install ${QUIET}

       else #${SKIP_INSTALL} = true
               info_msg "LKP installation skipped"
       fi

       #check correct installation status
       LKP_PATH=$(readlink -f $(which lkp) 2>/dev/null | sed 's:bin.*::')

       if [[ -z  "${LKP_PATH}" ]]; then
               error_msg "LKP is not installed in the system"
               exit 1
       else
               info_msg "LKP is installed correctly"
       fi
}

#--- Install single atomic-jobs dependencies unless otherwise specified
# - INPUT:     <None>
# - SET:       <None>
# - MODIFY:    <None>
install_atomic_jobs_dependencies()
{
       check_function_param 0 "$@"

       if [ "${SKIP_TEST_INSTALL}" = 'false' ]; then
               info_msg "--Installing atomic jobs..."
               for job in ${ATOMIC_JOBS[@]}; do
                       eval sudo lkp install ${job} ${QUIET}
               done
       else
               info_msg "--Skip atomic jobs dependencies installation"
       fi
}
#--- Create atomic-jobs from test with $ lkp split-job
# - INPUT:     [ext] test
# - SET:       ATOMIC_JOBS
# - MODIFY     <None>
create_atomic_jobs()
{
       check_function_param 0 "$@"

       info_msg "+Creating atomic-jobs for ${test}..."
       readarray -t ATOMIC_FILES <<< $(sudo lkp split-job ${LKP_PATH}/jobs/${test}.yaml | cut -f 3 -d ' ')
       #ATOMIC_FILES <<< $(echo "${TEMP[@]}" | tr --delete '\n')
       #echo "${ATOMIC_FILES[@]}"

}
#--- Run an atomic job created by $lkp split-job
# - INPUT:     $1 =  Name of .yaml file to run
# - SET:       <None>
# - MODIFY:    <None>
run_atomic_job()
{
       check_function_param 1 "$@"

       info_msg "++Running ${job}..."
       eval sudo lkp run ./${1} ${QUIET}
       report_unknown "${1}"

}
#------------------------------------------------------------------------------#
#--- MAIN ---------------------------------------------------------------------#

# cleaning the output
create_out_dir "${OUTPUT_DIR}"

report_set_start "LKP"

argument_parsing "$@"

if [ -z "${TEST_QUEUE}"  ]; then
       error_msg "No test has been passed to the script"
       exit 1
fi

install
cd ${TEST_DIR}


info_msg "Running..."
mkdir -p ./working && cd ./working && rm -rf ./*
# Running different tests passed with -t flag
for test in ${TEST_QUEUE[@]}; do
       info_msg "+Running: ${test}"

       create_atomic_jobs

       install_atomic_jobs_dependencies

       #Atomic Jobs specified with -T flag
       if [[ -z "${ATOMIC_JOBS}" ]]; then
               info_msg "No atomic-job specified; running all"
       fi
       echo "ATJ: ${ATOMIC_JOBS[@]}"
       echo "ATF ${#ATOMIC_FILES[@]}: ${ATOMIC_FILES[@]}"
       echo
       for job in "${ATOMIC_FILES[@]}"; do
               echo "JOB: ${job:2}"
               if [[ -z "${ATOMIC_JOBS[@]}" ]] || [[ ${ATOMIC_JOBS[@]} =~ ${job:2} ]]; then
                       run_atomic_job "${job}"
               else
                       info_msg "++Ignoring ${job}"
               fi
       done

       cp -r "/lkp/result/${test}" "${OUTPUT_DIR}"
       report_pass "${test}"
done

report_set_stop

#--- END OF MAIN --------------------------------------------------------------#
#------------------------------------------------------------------------------#
